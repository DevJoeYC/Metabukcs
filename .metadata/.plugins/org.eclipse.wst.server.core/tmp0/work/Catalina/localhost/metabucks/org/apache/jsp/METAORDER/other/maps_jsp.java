/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.78
 * Generated at: 2022-05-27 05:36:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.METAORDER.other;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class maps_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("	<head>\r\n");
      out.write("		<meta charset=\"UTF-8\">\r\n");
      out.write("		<title>메타벅스</title>\r\n");
      out.write("		<link type=\"text/css\" rel=\"stylesheet\" href=\"../css/all.css\">\r\n");
      out.write("		<script type=\"text/javascript\" src=\"../js/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("    	<script src=\"http://dmaps.daum.net/map_js_init/postcode.v2.js\"></script>\r\n");
      out.write("	</head>\r\n");
      out.write("	<body>\r\n");
      out.write("	<table align=center width=500px>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>\r\n");
      out.write("				<a href=\"index.jsp\"><img src=\"../img/back.png\"></a>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr style=\"height:100px;\">\r\n");
      out.write("			<td colspan=\"4\">\r\n");
      out.write("				<h2>\r\n");
      out.write("					매장정보\r\n");
      out.write("				</h2>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>\r\n");
      out.write("		    <div class=\"storeview\" style=\"float: left;\">\r\n");
      out.write("						<img src=\"../../HOME/image/store.jpg\" alt=\"\" width=\"490\" height=\"280\" style=\"display: inline-block;\">\r\n");
      out.write("						\r\n");
      out.write("							<div class=\"storeinfo\" style=\"padding: 50px;\">\r\n");
      out.write("								<h4 class=\"store\">1. 덕진 1호점</h4>\r\n");
      out.write("								<dl>\r\n");
      out.write("									<dt>주소</dt>\r\n");
      out.write("									<dd> 전라북도 전주시 덕진구 금암1동 667-52</dd>\r\n");
      out.write("									<dt>전화번호 063-222-3333</dt>\r\n");
      out.write("									<dd>-</dd>\r\n");
      out.write("									<dt>영업시간</dt>\r\n");
      out.write("									<dd>05:00-01:00</dd>\r\n");
      out.write("								</dl>\r\n");
      out.write("							</div>\r\n");
      out.write("					</div>\r\n");
      out.write("					<div id=\"map\" style=\"width:500px;height:500px;margin-top:10px;\"></div>\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("					<!--  다음 api -->\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("					<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("					<script src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=19be12d33bc6876bd246423cc84368f0&libraries=services\"></script>\r\n");
      out.write("					<script>\r\n");
      out.write("					    var mapContainer = document.getElementById('map'), // 지도를 표시할 div\r\n");
      out.write("					        mapOption = {\r\n");
      out.write("					            center: new daum.maps.LatLng(35.84024740275959, 127.1324696698611), // 지도의 중심좌표\r\n");
      out.write("					            level: 5 // 지도의 확대 레벨\r\n");
      out.write("					        };\r\n");
      out.write("					\r\n");
      out.write("					    //지도를 미리 생성\r\n");
      out.write("					    var map = new daum.maps.Map(mapContainer, mapOption);\r\n");
      out.write("					    //주소-좌표 변환 객체를 생성\r\n");
      out.write("					    var geocoder = new daum.maps.services.Geocoder();\r\n");
      out.write("					    //마커를 미리 생성\r\n");
      out.write("					    var marker = new daum.maps.Marker({\r\n");
      out.write("					        position: new daum.maps.LatLng(35.84024740275959, 127.1324696698611),\r\n");
      out.write("					        map: map\r\n");
      out.write("					    });\r\n");
      out.write("					\r\n");
      out.write("					 // 지도에 클릭 이벤트를 등록합니다\r\n");
      out.write("					 // 지도를 클릭하면 마지막 파라미터로 넘어온 함수를 호출합니다\r\n");
      out.write("					 kakao.maps.event.addListener(map, 'click', function(mouseEvent) {        \r\n");
      out.write("					     \r\n");
      out.write("					     // 클릭한 위도, 경도 정보를 가져옵니다 \r\n");
      out.write("					     var latlng = mouseEvent.latLng;\r\n");
      out.write("					     \r\n");
      out.write("					     var message = '클릭한 위치의 위도는 ' + latlng.getLat() + ' 이고, ';\r\n");
      out.write("					     message += '경도는 ' + latlng.getLng() + ' 입니다';\r\n");
      out.write("					     \r\n");
      out.write("					     alert(message);\r\n");
      out.write("					     //var resultDiv = document.getElementById('result'); \r\n");
      out.write("					     //resultDiv.innerHTML = message;\r\n");
      out.write("					     \r\n");
      out.write("					 });\r\n");
      out.write("					 \r\n");
      out.write("					    function sample5_execDaumPostcode() {\r\n");
      out.write("					        new daum.Postcode({\r\n");
      out.write("					            oncomplete: function(data) {\r\n");
      out.write("					                var addr = data.address; // 최종 주소 변수\r\n");
      out.write("					\r\n");
      out.write("					                // 주소 정보를 해당 필드에 넣는다.\r\n");
      out.write("					                document.getElementById(\"sample5_address\").value = addr;\r\n");
      out.write("					                // 주소로 상세 정보를 검색\r\n");
      out.write("					                geocoder.addressSearch(data.address, function(results, status) {\r\n");
      out.write("					                    // 정상적으로 검색이 완료됐으면\r\n");
      out.write("					                    if (status === daum.maps.services.Status.OK) {\r\n");
      out.write("					\r\n");
      out.write("					                        var result = results[0]; //첫번째 결과의 값을 활용\r\n");
      out.write("					\r\n");
      out.write("					                        // 해당 주소에 대한 좌표를 받아서\r\n");
      out.write("					                        var coords = new daum.maps.LatLng(result.y, result.x);\r\n");
      out.write("					                        // 지도를 보여준다.\r\n");
      out.write("					                        mapContainer.style.display = \"block\";\r\n");
      out.write("					                        map.relayout();\r\n");
      out.write("					                        // 지도 중심을 변경한다.\r\n");
      out.write("					                        map.setCenter(coords);\r\n");
      out.write("					                        // 마커를 결과값으로 받은 위치로 옮긴다.\r\n");
      out.write("					                        marker.setPosition(coords)\r\n");
      out.write("					                    }\r\n");
      out.write("					                });\r\n");
      out.write("					            }\r\n");
      out.write("					        }).open();\r\n");
      out.write("					    }\r\n");
      out.write("					</script>\r\n");
      out.write("		    </td>\r\n");
      out.write("	    </tr>\r\n");
      out.write("    </table>\r\n");
      out.write("	</body>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
