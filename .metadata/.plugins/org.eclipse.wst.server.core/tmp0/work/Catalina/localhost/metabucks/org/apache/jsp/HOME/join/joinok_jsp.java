/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.78
 * Generated at: 2022-05-17 15:56:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.HOME.join;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import DTO.*;
import meta.dto.*;
import meta.vo.*;
import meta.util.*;

public final class joinok_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("meta.dto");
    _jspx_imports_packages.add("meta.vo");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("meta.util");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("DTO");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

//한글 처리
request.setCharacterEncoding("UTF-8");
//======================== 앞단의 데이터 받기 ========

String id		= request.getParameter("userid");
String pw		= request.getParameter("userpw");
String name		= request.getParameter("name");
String mobile1	= request.getParameter("mobile1");
String mobile2	= request.getParameter("mobile2");
String mobile3	= request.getParameter("mobile3");
String email	= request.getParameter("email");

System.out.println(id);
System.out.println(pw);
System.out.println(name);
System.out.println(mobile1);
System.out.println(mobile2);
System.out.println(mobile3);
System.out.println(email);

String type		= "id";

//======================== 데이터 유효성 검사 처리 ========
if( id == null || pw == null || name == null
	|| mobile1 == null ||mobile2 == null || mobile3 == null ||email == null)
{

	out.println("ERROR");
	response.sendRedirect("../index.jsp");
	return;
}

if( id.equals("") || pw.equals("") || name.equals("")
		|| mobile1.equals("") || mobile2.equals("") ||mobile3.equals("") ||email.equals(""))
{
	out.println("ERROR");
	response.sendRedirect("../index.jsp");
	return;
}

//======================== 중복된 ID검사 처리 ========
accountDTO dto = new accountDTO();
//int code = dto.IsDuplicate(id, type);
//System.out.println(code);
if(dto.IsDuplicate(id, type) == accountDTO.DUPLICATE)
{
	
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("		window.onload = function()\r\n");
      out.write("		{\r\n");
      out.write("			alert(\"중복된 아이디로 가입된 회원정보가 있습니다.\");\r\n");
      out.write("			document.location = \"join.jsp\";\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("	");

		return;
		}

		//out.print(id);

		//======================== 회원정보 입력  처리 ========
		//u_fno생성
		TempKey	temp	= new TempKey();
		String	u_fno	= temp.memberKey();
		String	hp_str	= mobile1+mobile2+mobile3;
		//회원가입용 메소드 고유번호, 아이디, 비번, 0:회원, 이름, 전화번호, 이메일 
		accountVO NewVO = new accountVO(u_fno,id,pw,"0",name,hp_str,email);

		if(dto.Create(NewVO))
		{
			System.out.println("계정이 생성되었습니다.");
			accountVO vo = dto.Login(NewVO);
			if(vo!=null) { vo.info("계정생성확인"); }
		}

		/*
		accountVO user = new accountVO();
		user.setU_id(id);
		user.setU_pw(pw);
		user.setU_name(name);
		user.setU_hp(mobile1+mobile2+mobile3);
		user.setU_em(email);
		user.setU_fno(u_fno);

		dto.Insert(user);*/
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("	window.onload = function()\r\n");
      out.write("	{\r\n");
      out.write("		alert(\"회원가입이 완료되었습니다.\");\r\n");
      out.write("		document.location = \"../index.jsp\";\r\n");
      out.write("	}\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
